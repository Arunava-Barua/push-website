"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[662],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return b}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):u(u({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(t),h=a,b=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return t?r.createElement(b,u(u({ref:n},s),{},{components:t})):r.createElement(b,u({ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,u=new Array(o);u[0]=h;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[d]="string"==typeof e?e:a,u[1]=i;for(var c=2;c<o;c++)u[c]=t[c];return r.createElement.apply(null,u)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},85162:function(e,n,t){t.d(n,{Z:function(){return u}});var r=t(67294),a=t(86010),o={tabItem:"tabItem_Ymn6"};function u(e){var n=e.children,t=e.hidden,u=e.className;return r.createElement("div",{role:"tabpanel",className:(0,a.default)(o.tabItem,u),hidden:t},n)}},74866:function(e,n,t){t.d(n,{Z:function(){return y}});var r=t(87462),a=t(67294),o=t(86010),u=t(12466),i=t(16550),l=t(91980),c=t(67392),s=t(50012);function d(e){return function(e){var n,t;return null!==(n=null===(t=a.Children.map(e,(function(e){if(!e||(0,a.isValidElement)(e)&&(n=e.props)&&"object"==typeof n&&"value"in n)return e;var n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))||void 0===t?void 0:t.filter(Boolean))&&void 0!==n?n:[]}(e).map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes,default:n.default}}))}function p(e){var n=e.values,t=e.children;return(0,a.useMemo)((function(){var e=null!=n?n:d(t);return function(e){var n=(0,c.l)(e,(function(e,n){return e.value===n.value}));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,t])}function h(e){var n=e.value;return e.tabValues.some((function(e){return e.value===n}))}function b(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId,o=(0,i.k6)(),u=function(e){var n=e.queryString,t=void 0!==n&&n,r=e.groupId;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:t,groupId:r});return[(0,l._X)(u),(0,a.useCallback)((function(e){if(u){var n=new URLSearchParams(o.location.search);n.set(u,e),o.replace(Object.assign({},o.location,{search:n.toString()}))}}),[u,o])]}function f(e){var n,t,r,o,u=e.defaultValue,i=e.queryString,l=void 0!==i&&i,c=e.groupId,d=p(e),f=(0,a.useState)((function(){return function(e){var n,t=e.defaultValue,r=e.tabValues;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:r}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+t+'" but none of its children has the corresponding value. Available values are: '+r.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return t}var a=null!==(n=r.find((function(e){return e.default})))&&void 0!==n?n:r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:u,tabValues:d})})),m=f[0],g=f[1],v=b({queryString:l,groupId:c}),C=v[0],x=v[1],y=(n=function(e){return e?"docusaurus.tab."+e:null}({groupId:c}.groupId),t=(0,s.Nk)(n),r=t[0],o=t[1],[r,(0,a.useCallback)((function(e){n&&o.set(e)}),[n,o])]),k=y[0],T=y[1],B=function(){var e=null!=C?C:k;return h({value:e,tabValues:d})?e:null}();return(0,a.useLayoutEffect)((function(){B&&g(B)}),[B]),{selectedValue:m,selectValue:(0,a.useCallback)((function(e){if(!h({value:e,tabValues:d}))throw new Error("Can't select invalid tab value="+e);g(e),x(e),T(e)}),[x,T,d]),tabValues:d}}var m=t(72389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){var n=e.className,t=e.block,i=e.selectedValue,l=e.selectValue,c=e.tabValues,s=[],d=(0,u.o5)().blockElementScrollPositionUntilNextRender,p=function(e){var n=e.currentTarget,t=s.indexOf(n),r=c[t].value;r!==i&&(d(n),l(r))},h=function(e){var n,t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":var r,a=s.indexOf(e.currentTarget)+1;t=null!==(r=s[a])&&void 0!==r?r:s[0];break;case"ArrowLeft":var o,u=s.indexOf(e.currentTarget)-1;t=null!==(o=s[u])&&void 0!==o?o:s[s.length-1]}null===(n=t)||void 0===n||n.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.default)("tabs",{"tabs--block":t},n)},c.map((function(e){var n=e.value,t=e.label,u=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:function(e){return s.push(e)},onKeyDown:h,onClick:p},u,{className:(0,o.default)("tabs__item",g.tabItem,null==u?void 0:u.className,{"tabs__item--active":i===n})}),null!=t?t:n)})))}function C(e){var n=e.lazy,t=e.children,r=e.selectedValue,o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){var u=o.find((function(e){return e.props.value===r}));return u?(0,a.cloneElement)(u,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r})})))}function x(e){var n=f(e);return a.createElement("div",{className:(0,o.default)("tabs-container",g.tabList)},a.createElement(v,(0,r.Z)({},e,n)),a.createElement(C,(0,r.Z)({},e,n)))}function y(e){var n=(0,m.Z)();return a.createElement(x,(0,r.Z)({key:String(n)},e))}},49567:function(e,n,t){t.r(n),t.d(n,{assets:function(){return h},contentTitle:function(){return d},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return b}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),u=t(23734),i=t(74866),l=t(85162),c=["components"],s={},d="Integrate Push Chat",p={unversionedId:"chat/ui-components/Integrate-Push-Chat",id:"chat/ui-components/Integrate-Push-Chat",title:"Integrate Push Chat",description:"Streamline Chat Integration for Developers: Say goodbye to the hassles of UI design and API calls. With our web components available in the @pushprotocol/uiweb package, you can effortlessly integrate push chat functionality into your dapp using just a few lines of code.",source:"@site/docs/chat/03-ui-components/01-Integrate-Push-Chat.mdx",sourceDirName:"chat/03-ui-components",slug:"/chat/ui-components/Integrate-Push-Chat",permalink:"/docs/chat/ui-components/Integrate-Push-Chat",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/chat/03-ui-components/01-Integrate-Push-Chat.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"pushChatSidebar",previous:{title:"UI Components",permalink:"/docs/chat/ui-components"},next:{title:"ChatUIProvider",permalink:"/docs/chat/ui-components/Advanced/ChatUIProvider"}},h={},b=[{value:"Code",id:"code",level:2},{value:"Live playground",id:"live-playground",level:2}],f={toc:b},m="wrapper";function g(e){var n=e.components,s=(0,a.Z)(e,c);return(0,o.kt)(m,(0,r.Z)({},f,s,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integrate-push-chat"},"Integrate Push Chat"),(0,o.kt)("p",null,"Streamline Chat Integration for Developers: Say goodbye to the hassles of UI design and API calls. With our web components available in the ",(0,o.kt)("inlineCode",{parentName:"p"},"@pushprotocol/uiweb")," package, you can effortlessly integrate push chat functionality into your dapp using just a few lines of code."),(0,o.kt)("p",null,"As an example, take a look at how we seamlessly integrated the Push Chat View component into the ",(0,o.kt)("a",{parentName:"p",href:"https://push.org/brb"},(0,o.kt)("inlineCode",{parentName:"a"},"push.org/brb"))," website in the image below."),(0,o.kt)(u.F0,{mdxType:"ModalContainer"},(0,o.kt)("img",{src:t(36982).Z})),(0,o.kt)("h2",{id:"code"},"Code"),(0,o.kt)("p",null,"In order to add the above chatview component the developer just need to write few lines of code"),(0,o.kt)(i.Z,{className:"codetabs",groupId:"code-examples",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"react",attributes:{className:"codetab react"},default:!0,mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ChatViewComponent, ChatUIProvider, darkChatTheme } from "@pushprotocol/uiweb";\n\nexport function App() {\n  // you can pass your own signer, if you don\'t pass a signer\n  // then it will automatically use the default onboarding kit i.e. blocknative\n  // !pgpPrivatekey && !account && !isConnected => will give the note\n  return (\n    <ChatUIProvider theme={darkChatTheme}>\n      <ChatViewComponent\n        chatId="b8e068e02fe12d7136bc2f24408835573f30c6fbf0b65ea26ab4c7055a2c85f1"\n        limit={10}\n        isConnected={true}\n      />\n    </ChatUIProvider>\n  );\n}\n')))),(0,o.kt)("h2",{id:"live-playground"},"Live playground"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"customPropMinimized=\"true\"\n\n// don't forget to import\n// import { ChatUIProvider, ChatViewComponent } from @pushprotocol/restapi;\nfunction App(props) {\n  // define custom chat theme for your frontend and pass it in ChatUIProvider\n  const PushChatTheme = {\n    borderRadius: {\n      chatViewComponent: '32px',\n      chatProfile: '29px',\n      messageInput: '29px',\n      searchInput: '99px',\n      modal: '16px',\n      modalInnerComponents:'12px'\n    },\n    \n    backgroundColor: {\n      chatViewComponentBackground:\n          'rgba(18, 18, 24, 0.65)',\n      chatProfileBackground: '#2A2A39',\n      messageInputBackground: 'transparent',\n      chatSentBubbleBackground: '#AF3FB1',\n      chatReceivedBubbleBackground: '#424258',\n      encryptionMessageBackground: '#2A2A39',\n      buttonBackground: 'rgb(202, 89, 155)',\n      modalBackground: '#2F3137',\n      criteriaLabelBackground: 'rgb(47, 49, 55)',\n      modalInputBackground:'transparent',\n      modalHoverBackground:'rgb(64, 70, 80)',\n      buttonDisableBackground:'#787E99',\n      toastSuccessBackground:\n      'linear-gradient(90.15deg, #30CC8B -125.65%, #30CC8B -125.63%, #2F3137 42.81%)',\n    toastErrorBackground:\n      'linear-gradient(89.96deg, #FF2070 -101.85%, #2F3137 51.33%)',\n    toastShadowBackground: '#00000010',\n    },\n    \n    fontSize: {\n      chatProfileText: '17px',\n      messageInputText: '16px',\n      chatSentBubbleText: '14px',\n      chatReceivedBubbleText: '14px',\n      timestamp: '15px',\n      // chatBubblesSenderAddressText: '16px',\n      encryptionMessageText: '13px',\n      chatReceivedBubbleAddressText: '12px',\n      chatReceivedBubbleTimestampText: '12px',\n      chatSentBubbleTimestampText: '12px',\n      searchInputText:'16px',\n      searchPlaceholderText:'16px'\n    },\n    \n    fontWeight: {\n      chatProfileText: '500',\n      messageInputText: '400',\n      chatSentBubbleText: '400',\n      chatReceivedBubbleText: '400',\n      timestamp: '300',\n      // chatBubblesSenderAddressText: '300',\n      encryptionMessageText: '400',\n      chatReceivedBubbleAddressText: '300',\n      chatReceivedBubbleTimestampText: '400',\n      chatSentBubbleTimestampText: '400',\n      searchInputText:'400',\n      searchPlaceholderText:'400'\n    },\n    \n    fontFamily: 'inherit',\n    \n    border: {\n      chatViewComponent: '1px solid #3A3A4A',\n      chatProfile: '1px solid #3A3A4A',\n      messageInput: '1px solid #3A3A4A',\n      searchInput:'1px solid transparent',\n      modal:'none',\n      modalInnerComponents:'1px solid rgb(74, 79, 103)'\n    },\n    \n    iconColor: {\n      emoji: 'rgba(120, 126, 153, 1)',\n      attachment: 'rgba(120, 126, 153, 1)',\n      sendButton: 'rgba(120, 126, 153, 1)',\n      groupSettings: 'rgba(120, 126, 153, 1)',\n    },\n    textColor: {\n      chatProfileText: '#fff',\n      messageInputText: 'rgb(182, 188, 214)',\n      chatSentBubbleText: '#fff',\n      chatReceivedBubbleText: '#fff',\n      timestamp: '#87879A',\n      // chatBubblesSenderAddressText: 'rgb(182, 188, 214)',\n      encryptionMessageText: 'rgb(182, 188, 214)',\n      buttonText: '#fff',\n      chatReceivedBubbleAddressText: '#87879A',\n      chatReceivedBubbleTimestampText: 'red',\n      chatSentBubbleTimestampText: 'red',\n      searchInputText:'#fff',\n      searchPlaceholderText:'rgb(101, 119, 149)',\n      modalHeadingText:'#fff',\n      modalSubHeadingText:'rgb(182, 188, 214)',\n      buttonDisableText:'#B6BCD6'\n    },\n    backdropFilter: 'blur(6.5px)',\n    spinnerColor: 'rgb(202, 89, 155)',\n    scrollbarColor: 'rgb(202, 89, 155)',\n    // backdropFilter: 'blur(6.5px)',\n    // modalBackgroundColor:'rgba(47, 49, 55, 1)',\n    // spinnerColor:'rgb(202, 89, 155)',\n    // scrollbarColor:'rgb(202, 89, 155)',\n    // //the rest param needs to be included in categories\n    // modalPrimaryTextColor: '#B6BCD6',\n    // modalSearchBarBorderColor: '#4A4F67',\n    // modalSearchBarBackground: '#282A2E',\n    // snapFocusBg: '#404650',\n    // groupButtonBackgroundColor: '#2F3137',\n    // groupButtonTextColor: '#787E99',\n    // modalConfirmButtonBorder: '1px solid #787E99',\n    // groupSearchProfilBackground: '#404650',\n    // modalInputBorderColor: '#4A4F67',\n    // snackbarBorderText: '#B6BCD6',\n    // snackbarBorderIcon:\n    //     'brightness(0) saturate(100%) invert(89%) sepia(8%) saturate(1567%) hue-rotate(191deg) brightness(86%) contrast(93%)',\n    // modalContentBackground: '#2F3137',\n    // modalProfileTextColor: '#B6BCD6',\n    // toastSuccessBackground:\n    //     'linear-gradient(90.15deg, #30CC8B -125.65%, #30CC8B -125.63%, #2F3137 42.81%)',\n    // toastErrorBackground:\n    //     'linear-gradient(89.96deg, #FF2070 -101.85%, #2F3137 51.33%)',\n    // toastShadowColor: '#00000010',\n    // toastBorderColor: '#4A4F67',\n    // mainBg: '#000',\n    // modalBorderColor: '#4A4F67',\n    // modalDescriptionTextColor: '#787E99',\n    // modalIconColor: '#787E99',\n    // pendingCardBackground: 'rgba(173, 176, 190, 0.08)',\n    // modalHeadingColor: '#B6BCD6',\n    // defaultBorder: '#4A4F67',\n  };\n\n  return (\n    <>\n      <h2>Live chat with custom theme and token gated</h2>\n      <div style={{ height: '75vh', margin: '20px auto', background:'black', borderRadius:'40px' }}>\n        <ChatUIProvider theme={PushChatTheme}>\n          <ChatViewComponent\n            chatId=\"4ac5ab85c9c3d57adbdf2dba79357e56b2f9ef0256befe750d9f93af78d2ca68\"\n            limit={10}\n            isConnected={true}\n            onGetTokenClick={()=>setShowFaucet(true)}\n          />\n        </ChatUIProvider>\n      </div>\n    </>\n  );\n}\n")))}g.isMDXComponent=!0},36982:function(e,n,t){n.Z=t.p+"assets/images/chat-6ad966dbd2d5595085496e8a5fc555dd.png"}}]);