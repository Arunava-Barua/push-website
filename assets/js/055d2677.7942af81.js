"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[88271],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return f}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),u=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(a),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return a?n.createElement(f,o(o({ref:t},c),{},{components:a})):n.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,o=new Array(s);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<s;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},85162:function(e,t,a){a.d(t,{Z:function(){return o}});var n=a(67294),r=a(86010),s={tabItem:"tabItem_Ymn6"};function o(e){var t=e.children,a=e.hidden,o=e.className;return n.createElement("div",{role:"tabpanel",className:(0,r.default)(s.tabItem,o),hidden:a},t)}},74866:function(e,t,a){a.d(t,{Z:function(){return T}});var n=a(87462),r=a(67294),s=a(86010),o=a(12466),l=a(16550),i=a(91980),u=a(67392),c=a(50012);function p(e){return function(e){var t,a;return null!==(t=null===(a=r.Children.map(e,(function(e){if(!e||(0,r.isValidElement)(e)&&(t=e.props)&&"object"==typeof t&&"value"in t)return e;var t;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))||void 0===a?void 0:a.filter(Boolean))&&void 0!==t?t:[]}(e).map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes,default:t.default}}))}function d(e){var t=e.values,a=e.children;return(0,r.useMemo)((function(){var e=null!=t?t:p(a);return function(e){var t=(0,u.l)(e,(function(e,t){return e.value===t.value}));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function m(e){var t=e.value;return e.tabValues.some((function(e){return e.value===t}))}function f(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId,s=(0,l.k6)(),o=function(e){var t=e.queryString,a=void 0!==t&&t,n=e.groupId;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=n?n:null}({queryString:a,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((function(e){if(o){var t=new URLSearchParams(s.location.search);t.set(o,e),s.replace(Object.assign({},s.location,{search:t.toString()}))}}),[o,s])]}function b(e){var t,a,n,s,o=e.defaultValue,l=e.queryString,i=void 0!==l&&l,u=e.groupId,p=d(e),b=(0,r.useState)((function(){return function(e){var t,a=e.defaultValue,n=e.tabValues;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!m({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}var r=null!==(t=n.find((function(e){return e.default})))&&void 0!==t?t:n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:o,tabValues:p})})),h=b[0],g=b[1],v=f({queryString:i,groupId:u}),k=v[0],y=v[1],T=(t=function(e){return e?"docusaurus.tab."+e:null}({groupId:u}.groupId),a=(0,c.Nk)(t),n=a[0],s=a[1],[n,(0,r.useCallback)((function(e){t&&s.set(e)}),[t,s])]),N=T[0],w=T[1],I=function(){var e=null!=k?k:N;return m({value:e,tabValues:p})?e:null}();return(0,r.useLayoutEffect)((function(){I&&g(I)}),[I]),{selectedValue:h,selectValue:(0,r.useCallback)((function(e){if(!m({value:e,tabValues:p}))throw new Error("Can't select invalid tab value="+e);g(e),y(e),w(e)}),[y,w,p]),tabValues:p}}var h=a(72389),g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){var t=e.className,a=e.block,l=e.selectedValue,i=e.selectValue,u=e.tabValues,c=[],p=(0,o.o5)().blockElementScrollPositionUntilNextRender,d=function(e){var t=e.currentTarget,a=c.indexOf(t),n=u[a].value;n!==l&&(p(t),i(n))},m=function(e){var t,a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":var n,r=c.indexOf(e.currentTarget)+1;a=null!==(n=c[r])&&void 0!==n?n:c[0];break;case"ArrowLeft":var s,o=c.indexOf(e.currentTarget)-1;a=null!==(s=c[o])&&void 0!==s?s:c[c.length-1]}null===(t=a)||void 0===t||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.default)("tabs",{"tabs--block":a},t)},u.map((function(e){var t=e.value,a=e.label,o=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:function(e){return c.push(e)},onKeyDown:m,onClick:d},o,{className:(0,s.default)("tabs__item",g.tabItem,null==o?void 0:o.className,{"tabs__item--active":l===t})}),null!=a?a:t)})))}function k(e){var t=e.lazy,a=e.children,n=e.selectedValue,s=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){var o=s.find((function(e){return e.props.value===n}));return o?(0,r.cloneElement)(o,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==n})})))}function y(e){var t=b(e);return r.createElement("div",{className:(0,s.default)("tabs-container",g.tabList)},r.createElement(v,(0,n.Z)({},e,t)),r.createElement(k,(0,n.Z)({},e,t)))}function T(e){var t=(0,h.Z)();return r.createElement(y,(0,n.Z)({key:String(t)},e))}},32707:function(e,t,a){a.r(t),a.d(t,{assets:function(){return d},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var n=a(87462),r=a(63366),s=(a(67294),a(3905)),o=a(74866),l=a(85162),i=["components"],u={id:"docs-chat-quickstart",title:"Quickstart",hide_title:!1,slug:"./quickstart",displayed_sidebar:"pushChatSidebar",sidebar_position:2,image:"/assets/docs/previews/docs_chat--quickstart.png"},c="Quickstart",p={unversionedId:"chat/docs-chat-quickstart",id:"chat/docs-chat-quickstart",title:"Quickstart",description:"Everything you will need to get up and running in 2 mins or less!",source:"@site/docs/chat/02-Quickstart-Push-Chat.mdx",sourceDirName:"chat",slug:"/chat/quickstart",permalink:"/docs/chat/quickstart",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/chat/02-Quickstart-Push-Chat.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"docs-chat-quickstart",title:"Quickstart",hide_title:!1,slug:"./quickstart",displayed_sidebar:"pushChatSidebar",sidebar_position:2,image:"/assets/docs/previews/docs_chat--quickstart.png"},sidebar:"pushChatSidebar",previous:{title:"Intro to Push Chat",permalink:"/docs/chat/"},next:{title:"Build",permalink:"/docs/chat/build"}},d={},m=[{value:"Installation",id:"installation",level:3},{value:"Import libraries",id:"import-libraries",level:3},{value:"Initialize Chat",id:"initialize-chat",level:3},{value:"Send Message",id:"send-message",level:3},{value:"Stream / Real time updates / Socket",id:"stream--real-time-updates--socket",level:3}],f={toc:m},b="wrapper";function h(e){var t=e.components,a=(0,r.Z)(e,i);return(0,s.kt)(b,(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"quickstart"},"Quickstart"),(0,s.kt)("p",null,"Everything you will need to get up and running in 2 mins or less!"),(0,s.kt)("head",null,(0,s.kt)("title",null,"Quickstart | Push Chat | Push Documentation")),(0,s.kt)("h3",{id:"installation"},"Installation"),(0,s.kt)(o.Z,{className:"codetabs",groupId:"code-examples",mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",attributes:{className:"codetab js"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Install Libraries\nnpm install @pushprotocol/restapi@latest @pushprotocol/socket@latest ethers@^5.7\n"))),(0,s.kt)(l.Z,{value:"react",attributes:{className:"codetab react"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Install Libraries\nnpm install @pushprotocol/restapi@latest @pushprotocol/socket@latest ethers@^5.7\n"))),(0,s.kt)(l.Z,{value:"reactnative",attributes:{className:"codetab reactnative"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Install Libraries\nnpm install @pushprotocol/restapi@latest @pushprotocol/socket@latest ethers@^5.7\n")))),(0,s.kt)("h3",{id:"import-libraries"},"Import libraries"),(0,s.kt)(o.Z,{className:"codetabs",groupId:"code-examples",mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",attributes:{className:"codetab js"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Import restapi for function calls  \n// Import socket for listening for real time messages\nimport { PushAPI } from '@pushprotocol/restapi';\nimport { createSocketConnection, EVENTS } from '@pushprotocol/socket';\n\n// Ethers v5 or Viem, both are supported\nimport { ethers } from 'ethers';\n"))),(0,s.kt)(l.Z,{value:"react",attributes:{className:"codetab react"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Import restapi for function calls  \n// Import socket for listening for real time messages\nimport { PushAPI } from '@pushprotocol/restapi';\nimport { createSocketConnection, EVENTS } from '@pushprotocol/socket';\n\n// Ethers v5 or Viem, both are supported\nimport { ethers } from 'ethers';\n"))),(0,s.kt)(l.Z,{value:"reactnative",attributes:{className:"codetab reactnative"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Import restapi for function calls  \n// Import socket for listening for real time messages\nimport { PushAPI } from '@pushprotocol/restapi';\nimport { createSocketConnection, EVENTS } from '@pushprotocol/socket';\n\n// Ethers v5 or Viem, both are supported\nimport { ethers } from 'ethers';\n")))),(0,s.kt)("h3",{id:"initialize-chat"},"Initialize Chat"),(0,s.kt)(o.Z,{className:"codetabs",groupId:"code-examples",mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",attributes:{className:"codetab js"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Creating a random signer from a wallet, ideally this is the wallet you will connect\nconst signer = ethers.Wallet.createRandom();\n\n// Initialize wallet user, pass 'prod' instead of 'staging' for mainnet apps\nconst userAlice = await PushAPI.initialize(signer, { env: 'staging' });\n"))),(0,s.kt)(l.Z,{value:"react",attributes:{className:"codetab react"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Creating a random signer from a wallet, ideally this is the wallet you will connect\nconst signer = ethers.Wallet.createRandom();\n\n// Initialize wallet user, pass 'prod' instead of 'staging' for mainnet apps\nconst userAlice = await PushAPI.initialize(signer, { env: 'staging' });\n"))),(0,s.kt)(l.Z,{value:"reactnative",attributes:{className:"codetab reactnative"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Creating a random signer from a wallet, ideally this is the wallet you will connect\nconst signer = ethers.Wallet.createRandom();\n\n// Initialize wallet user, pass 'prod' instead of 'staging' for mainnet apps\nconst userAlice = await PushAPI.initialize(signer, { env: 'staging' });\n")))),(0,s.kt)("h3",{id:"send-message"},"Send Message"),(0,s.kt)(o.Z,{className:"codetabs",groupId:"code-examples",mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",attributes:{className:"codetab js"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"  // This will be the wallet address of the recipient \n  const toWalletAddress = ethers.Wallet.createRandom().address;\n\n  // Send a message to Bob\n  const aliceMessagesBob = await userAlice.chat.send(toWalletAddress, {\n    content: 'Hello Bob!',\n    type: 'Text',\n  });\n"))),(0,s.kt)(l.Z,{value:"react",attributes:{className:"codetab react"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"  // This will be the wallet address of the recipient \n  const toWalletAddress = ethers.Wallet.createRandom().address;\n\n  // Send a message to Bob\n  const aliceMessagesBob = await userAlice.chat.send(toWalletAddress, {\n    content: 'Hello Bob!',\n    type: 'Text',\n  });\n"))),(0,s.kt)(l.Z,{value:"reactnative",attributes:{className:"codetab reactnative"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"  // This will be the wallet address of the recipient \n  const bobWalletAddress = ethers.Wallet.createRandom().address;\n\n  // Send a message to Bob\n  const aliceMessagesBob = await userAlice.chat.send(bobWalletAddress, {\n    content: 'Hello Bob!',\n    type: 'Text',\n  });\n")))),(0,s.kt)("h3",{id:"stream--real-time-updates--socket"},"Stream / Real time updates / Socket"),(0,s.kt)(o.Z,{className:"codetabs",groupId:"code-examples",mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"js",attributes:{className:"codetab js"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Create Socket Connection\nconst pushSDKSocket = createSocketConnection({\n  user: signer.wallet,\n  socketType: 'chat',\n  socketOptions: { autoConnect: true, reconnectionAttempts: 3 },\n  env: 'staging',\n});\n\n// To listen to real time message\npushSDKSocket.on(EVENTS.CHAT_RECEIVED_MESSAGE, (message) => {\n  console.log(message);\n});\n"))),(0,s.kt)(l.Z,{value:"react",attributes:{className:"codetab react"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Create Socket Connection\nconst pushSDKSocket = createSocketConnection({\n  user: signer.wallet,\n  socketType: 'chat',\n  socketOptions: { autoConnect: true, reconnectionAttempts: 3 },\n  env: 'staging',\n});\n\n// To listen to real time message\npushSDKSocket.on(EVENTS.CHAT_RECEIVED_MESSAGE, (message) => {\n  console.log(message);\n});\n"))),(0,s.kt)(l.Z,{value:"reactnative",attributes:{className:"codetab reactnative"},default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"// Create Stream / Real time / Socket Connection\nconst pushSDKSocket = createSocketConnection({\n  user: signer.wallet,\n  socketType: 'chat',\n  socketOptions: { autoConnect: true, reconnectionAttempts: 3 },\n  env: 'staging',\n});\n\n// To listen to real time message\npushSDKSocket.on(EVENTS.CHAT_RECEIVED_MESSAGE, (message) => {\n  console.log(message);\n});\n")))))}h.isMDXComponent=!0}}]);