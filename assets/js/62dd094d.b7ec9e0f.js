"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[11112],{3905:function(t,e,n){n.d(e,{Zo:function(){return l},kt:function(){return m}});var a=n(67294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var s=a.createContext({}),d=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},l=function(t){var e=d(t.components);return a.createElement(s.Provider,{value:e},t.children)},u="mdxType",f={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,i=t.originalType,s=t.parentName,l=c(t,["components","mdxType","originalType","parentName"]),u=d(n),p=o,m=u["".concat(s,".").concat(p)]||u[p]||f[p]||i;return n?a.createElement(m,r(r({ref:e},l),{},{components:n})):a.createElement(m,r({ref:e},l))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var i=n.length,r=new Array(i);r[0]=p;var c={};for(var s in e)hasOwnProperty.call(e,s)&&(c[s]=e[s]);c.originalType=t,c[u]="string"==typeof t?t:o,r[1]=c;for(var d=2;d<i;d++)r[d]=n[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},73266:function(t,e,n){n.r(e),n.d(e,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),r=["components"],c={id:"docs-notifications-develop-send-notification-via-smart-contract",title:"Send Notification (via Smart Contract)",hide_title:!0,slug:"./send-notification-via-smart-contract",displayed_sidebar:"pushNotificationSidebar",sidebar_position:13,image:"/assets/docs/previews/docs_notifications_develop_send_notification_via_smart_contract--send_notification_(via_smart_contract).png"},s="Send notification using smart contract",d={unversionedId:"notifications/build/docs-notifications-develop-send-notification-via-smart-contract",id:"notifications/build/docs-notifications-develop-send-notification-via-smart-contract",title:"Send Notification (via Smart Contract)",description:"Push contracts are designed to act as a communication middleware for your smart contracts which ensures that even smart contracts can communicate with the wallet addresses (ie: web3 users).",source:"@site/docs/notifications/01-build/13-Develop-Send-Notification-Smart-Contract.mdx",sourceDirName:"notifications/01-build",slug:"/notifications/build/send-notification-via-smart-contract",permalink:"/docs/notifications/build/send-notification-via-smart-contract",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/notifications/01-build/13-Develop-Send-Notification-Smart-Contract.mdx",tags:[],version:"current",sidebarPosition:13,frontMatter:{id:"docs-notifications-develop-send-notification-via-smart-contract",title:"Send Notification (via Smart Contract)",hide_title:!0,slug:"./send-notification-via-smart-contract",displayed_sidebar:"pushNotificationSidebar",sidebar_position:13,image:"/assets/docs/previews/docs_notifications_develop_send_notification_via_smart_contract--send_notification_(via_smart_contract).png"},sidebar:"pushNotificationSidebar",previous:{title:"Send Notification",permalink:"/docs/notifications/build/send-notification"},next:{title:"Notification Styling",permalink:"/docs/notifications/build/styling-notificaiton-content"}},l={},u=[{value:"Sending notifications from smart contract",id:"sending-notifications-from-smart-contract",level:2},{value:"Step 1\ufe0f\u20e3 - Locate the contract address of Push",id:"step-1\ufe0f\u20e3---locate-the-contract-address-of-push",level:3},{value:"Step 2\ufe0f\u20e3 - Import Push Comm interface",id:"step-2\ufe0f\u20e3---import-push-comm-interface",level:3},{value:"Step 3\ufe0f\u20e3 - Locate your channel address",id:"step-3\ufe0f\u20e3---locate-your-channel-address",level:3},{value:"Step 4\ufe0f\u20e3 - Call the contract function",id:"step-4\ufe0f\u20e3---call-the-contract-function",level:3},{value:"Step 5\ufe0f\u20e3 - Add your smart contract address as your channel delegate",id:"step-5\ufe0f\u20e3---add-your-smart-contract-address-as-your-channel-delegate",level:3}],f={toc:u},p="wrapper";function m(t){var e=t.components,n=(0,o.Z)(t,r);return(0,i.kt)(p,(0,a.Z)({},f,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"send-notification-using-smart-contract"},"Send notification using smart contract"),(0,i.kt)("p",null,"Push contracts are designed to act as a communication middleware for your smart contracts which ensures that even smart contracts can communicate with the wallet addresses (ie: web3 users)."),(0,i.kt)("head",null,(0,i.kt)("title",null,"Send Notification (via Smart Contract) | Push Notifications | Push Documentation")),(0,i.kt)("h2",{id:"sending-notifications-from-smart-contract"},"Sending notifications from smart contract"),(0,i.kt)("h3",{id:"step-1\ufe0f\u20e3---locate-the-contract-address-of-push"},"Step 1\ufe0f\u20e3 - Locate the contract address of Push"),(0,i.kt)("p",null,"Ensure that you know the contract address of Push Communication smart contract based on the blockchain and network from which you are sending the communication out. "),(0,i.kt)("p",null,"For example: Staging Ethereum contract address is ",(0,i.kt)("inlineCode",{parentName:"p"},"0xb3971BCef2D791bc4027BbfedFb47319A4AAaaAa"),". List of all smart contract and their environment is available here \ud83d\udc49 ",(0,i.kt)("a",{parentName:"p",href:"/docs/notifications/push-smart-contracts/contract-addresses/",title:"List of all relevant push protocol smart contract addresses"},"Push smart contract addresses"),"."),(0,i.kt)("h3",{id:"step-2\ufe0f\u20e3---import-push-comm-interface"},"Step 2\ufe0f\u20e3 - Import Push Comm interface"),(0,i.kt)("p",null,"Start by importing the Push comm contract interface in your smart contract \ud83d\udc47"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},"// PUSH Comm Contract Interface\ninterface IPUSHCommInterface {\n    function sendNotification(address _channel, address _recipient, bytes calldata _identity) external;\n}\n")),(0,i.kt)("h3",{id:"step-3\ufe0f\u20e3---locate-your-channel-address"},"Step 3\ufe0f\u20e3 - Locate your channel address"),(0,i.kt)("p",null,"Ensure your channel is up and running by following this guide - ",(0,i.kt)("a",{parentName:"p",href:"/docs/notifications/tutorials/create-your-channel/",title:"Guide explaining how to create your channel"},"Creating your channel"),". Note down your channel address which you need to put in the code below as ",(0,i.kt)("strong",{parentName:"p"},"YOUR_CHANNEL_ADDRESS"),"."),(0,i.kt)("h3",{id:"step-4\ufe0f\u20e3---call-the-contract-function"},"Step 4\ufe0f\u20e3 - Call the contract function"),(0,i.kt)("p",null,"Next call the function ",(0,i.kt)("inlineCode",{parentName:"p"},"sendNotification(address _channel, address _recipient, bytes calldata _identity)")," and pass the address of the channel, recipient and the identity based on your needs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'IPUSHCommInterface(EPNS_COMM_CONTRACT_ADDRESS_FOR_SPECIFIC_BLOCKCHAIN).sendNotification(\n    YOUR_CHANNEL_ADDRESS, // from channel - recommended to set channel via dApp and put it\'s value -> then once contract is deployed, go back and add the contract address as delegate for your channel\n    to, // to recipient, put address(this) in case you want Broadcast or Subset. For targeted put the address to which you want to send\n    bytes(\n        string(\n            // We are passing identity here: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\n            abi.encodePacked(\n                "0", // this represents minimal identity, learn more: https://push.org/docs/notifications/notification-standards/notification-standards-advance/#notification-identity\n                "+", // segregator\n                "3", // define notification type:  https://push.org/docs/notifications/build/types-of-notification (1, 3 or 4) = (Broadcast, targeted or subset)\n                "+", // segregator\n                "Title", // this is notificaiton title\n                "+", // segregator\n                "Body" // notification body\n            )\n        )\n    )\n);\n')),(0,i.kt)("h3",{id:"step-5\ufe0f\u20e3---add-your-smart-contract-address-as-your-channel-delegate"},"Step 5\ufe0f\u20e3 - Add your smart contract address as your channel delegate"),(0,i.kt)("p",null,"The last step is to go back to your channel and add the smart contract address as a delegate ensuring notifications sent by your smart contract are routed through your channel and presented to your users. Checkout ",(0,i.kt)("a",{parentName:"p",href:"/docs/notifications/tutorials/create-your-channel/#adding-delegates-for-channel",title:"Guide to adding delegates to your channel"},"guide for adding delegates for channel")," to understand how to add delegates to your channel."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Here's an example of ",(0,i.kt)("a",{parentName:"p",href:"/docs/notifications/tutorials/token-transfer-notification-from-smart-contract/"},"how to build your ERC-20 token with in-built notifications"))))}m.isMDXComponent=!0}}]);