"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[15745],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||i;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[c]="string"==typeof e?e:o,s[1]=r;for(var u=2;u<i;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1509:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return c}});var a=n(87462),o=n(63366),i=(n(67294),n(3905)),s=["components"],r={slug:"getting-started-with-push-sdk-rest-api",title:"Getting Started With Push SDK REST API\u2699\ufe0f",authors:["push"],image:"./cover-image.webp",tags:["Web3","Blockchain","SDK","Push Notification Service","Developer"]},l=void 0,u={permalink:"/blog/getting-started-with-push-sdk-rest-api",source:"@site/blog/2023-02-01-getting-started-with-push/index.md",title:"Getting Started With Push SDK REST API\u2699\ufe0f",description:"Cover image of Getting Started With Push SDK REST API\u2699\ufe0f",date:"2023-02-01T00:00:00.000Z",formattedDate:"February 1, 2023",tags:[{label:"Web3",permalink:"/blog/tags/web-3"},{label:"Blockchain",permalink:"/blog/tags/blockchain"},{label:"SDK",permalink:"/blog/tags/sdk"},{label:"Push Notification Service",permalink:"/blog/tags/push-notification-service"},{label:"Developer",permalink:"/blog/tags/developer"}],readingTime:5.266666666666667,hasTruncateMarker:!0,authors:[{name:"Push Protocol",url:"https://push.org",imageURL:"/assets/blog/authors/authorpush.png",key:"push"}],frontMatter:{slug:"getting-started-with-push-sdk-rest-api",title:"Getting Started With Push SDK REST API\u2699\ufe0f",authors:["push"],image:"./cover-image.webp",tags:["Web3","Blockchain","SDK","Push Notification Service","Developer"]},prevItem:{title:"Push and Wherever Team Up to Bring Web3 Communication Tools to Dapps\ud83d\udee0\ufe0f",permalink:"/blog/push-and-wherever-team-up-to-bring-web3-communication-tools-to-dapps"},nextItem:{title:"QiDAO Taps Push to Update Users on their Debt Positions\ud83e\ude99",permalink:"/blog/qi-dao-taps-push-to-update-users-on-their-debt-positions"}},p={image:n(87285).Z,authorsImageUrls:[void 0]},c=[{value:"Fetching user notifications",id:"fetching-user-notifications",level:2},{value:"Fetching user subscriptions",id:"fetching-user-subscriptions",level:2},{value:"Fetching channel details",id:"fetching-channel-details",level:2},{value:"Searching for channels",id:"searching-for-channels",level:2},{value:"Opting out of a channel",id:"opting-out-of-a-channel",level:2},{value:"Sending a notification",id:"sending-a-notification",level:2},{value:"About Push Protocol",id:"about-push-protocol",level:3}],h={toc:c},d="wrapper";function m(e){var t=e.components,r=(0,o.Z)(e,s);return(0,i.kt)(d,(0,a.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Cover image of Getting Started With Push SDK REST API\u2699\ufe0f",src:n(87285).Z,width:"1400",height:"735"})),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ethereum-push-notification-service/push-sdk"},"PUSH-SDK"),", is a growing JavaScript-based SDK that allows developers to add push notification functionality to their dapps. Using the SDK, developers can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Build PUSH features into their dapps"),(0,i.kt)("li",{parentName:"ul"},"Get access to Push Nodes APIs"),(0,i.kt)("li",{parentName:"ul"},"Render Push Notifications UI")),(0,i.kt)("p",null,"It is written in Typescript and supports React, React Native, Plain JS, and Node JS-based platforms. (We are adding support for more!) It is also built on top of standard Web3 packages like ",(0,i.kt)("b",null,"ethers, @web3-react"),"."),(0,i.kt)("p",null,"If you\u2019re looking for our full documentation on ",(0,i.kt)("a",{parentName:"p",href:"https://docs.push.org/developers/developer-tooling/push-sdk"},"Push-SDK REST API, you can find that here"),"."),(0,i.kt)("p",null,"But for now, let\u2019s walk you through the main features of the Push-SDK REST API and how to use them in your code."),(0,i.kt)("h2",{id:"fetching-user-notifications"},"Fetching user notifications"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("b",null,"getFeeds")," method to fetch a user's notifications. This method takes an options object as an argument, which allows you to specify the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"user")," (mandatory, string): The user\u2019s address in CAIP format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"page")," (optional, number): The page index of the results. Default is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"limit")," (optional, number): The number of items per page. Default is 10."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"spam")," (optional, boolean): Whether to fetch spam notifications. Default is false."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"env")," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"raw")," (optional, boolean): Whether to return the raw, unformatted API response. Default is ",(0,i.kt)("b",null,"false"),".")),(0,i.kt)("p",null,"Here\u2019s an example of how you might use the ",(0,i.kt)("b",null,"getFeeds")," method in your code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const notifications = await PushAPI.user.getFeeds({\n  user: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  env: 'staging'\n});\n")),(0,i.kt)("p",null,"In this example, we define a user address using the CAIP format. CAIP, or Chain Agnostic Improvement Proposal, is a way to describe standards for blockchain projects that are not specific to a single chain. It was developed by the Ethereum Improvement Proposal (EIP) process and is used to identify and encode information about Ethereum addresses, contract addresses, and other crypto-assets."),(0,i.kt)("p",null,"It is important to note that CAIP is not a standardized way of identifying and encoding information about crypto-assets; it is under development by the Ethereum community and is not yet widely adopted in the ecosystem."),(0,i.kt)("p",null,"CAIP addresses are composed of three parts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"The namespace:")," This is a string designed to uniquely identify a blockchain ecosystem or set of ecosystems as a namespace."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"The network ID:")," This is an integer that identifies the Ethereum network the asset belongs to. For example, 1 is the main network, 3 is the Ropsten test network, and 5 is the Goerli test network."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"The address:")," This is the actual address of the asset, encoded as a hexadecimal string.")),(0,i.kt)("p",null,"For instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681\n")),(0,i.kt)("p",null,"In this example, the namespace is eip155 which identifies EVM chains, the network ID is 5 (Goerli test network) and the address is ",(0,i.kt)("b",null,"0xD8634C39BBFd4033c0d3289C4515275102423681"),"."),(0,i.kt)("p",null,"CAIP is designed to be flexible and extensible, allowing for the inclusion of additional information as needed. It is used by the Push Protocol and other Ethereum-based projects as a standardized way of identifying and encoding information about crypto-assets, and distinguishing information from different chains."),(0,i.kt)("p",null,"Continuing with ",(0,i.kt)("b",null,"getFeeds"),", to fetch spam notifications, set the ",(0,i.kt)("b",null,"spam")," parameter to ",(0,i.kt)("b",null,"true"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const spams = await PushAPI.user.getFeeds({\n  user: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  spam: true,\n  env: 'staging'\n});\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("b",null,"getFeeds")," method returns a list of notifications for the specified user."),(0,i.kt)("h2",{id:"fetching-user-subscriptions"},"Fetching user subscriptions"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("b",null,"getSubscriptions")," method to fetch a user's subscriptions. This method takes an options object as an argument, which allows you to specify the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"user")," (mandatory, string): The user\u2019s address in CAIP format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"env")," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019. Here\u2019s an example of how you might use the ",(0,i.kt)("b",null,"getSubscriptions")," method in your code:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const subscriptions = await PushAPI.user.getSubscriptions({\n  user: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  env: 'staging'\n});\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("b",null,"getSubscriptions")," method returns a list of channels ",(0,i.kt)("b",null,"[{ channel: '0xaddress', ... }]")," subscribed by the user."),(0,i.kt)("h2",{id:"fetching-channel-details"},"Fetching channel details"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("b",null,"getChannel")," method to fetch information about a specific channel. This method takes an options object as an argument, which allows you to specify the following parameters:"),(0,i.kt)("p",null,"channel (mandatory, string): The channel\u2019s address in CAIP format.\nenv (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019.\nHere\u2019s an example of how you might use the getChannel method in your code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const channelData = await PushAPI.channels.getChannel({\n  channel: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  env: 'staging'\n});\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("b",null,"getChannel")," method returns an object with information about the channel."),(0,i.kt)("h2",{id:"searching-for-channels"},"Searching for channels"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("b",null,"search")," method to search for channels based on a specified query. It takes an options object as an argument, which allows you to specify the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"query")," (mandatory, string): The search query."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"page")," (optional, number): The page index of the results. Default is 1."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"limi"),"t (optional, number): The number of items per page. Default is 10."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"env")," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019.")),(0,i.kt)("p",null,"Here\u2019s an example of how you might use the ",(0,i.kt)("b",null,"search")," method in your code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"await PushAPI.channels.subscribe({\n  signer: _signer,\n  user: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681',\n  channel: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681',\n    env: 'staging'\n    });\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("b",null,"subscribe")," method returns a confirmation of the subscription."),(0,i.kt)("h2",{id:"opting-out-of-a-channel"},"Opting out of a channel"),(0,i.kt)("p",null,"You can use the unsubscribe method to allow a user to opt out of a specific channel. This method takes an options object as an argument, which allows you to specify the following parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"signer")," (mandatory, object): The object that signs the unsubscription transaction."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"user")," (mandatory, string): The user\u2019s address in CAIP format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"channel")," (mandatory, string): The channel\u2019s address in CAIP format."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"env")," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019. Here\u2019s an example of how you might use the ",(0,i.kt)("b",null,"unsubscribe")," method in your code:")),(0,i.kt)("h2",{id:"sending-a-notification"},"Sending a notification"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("b",null,"sendNotification")," method from the payloads object to send a direct payload notification to a specific recipient, group of recipients, or all recipients. This method takes an options object as an argument, which allows you to specify the following parameters:"),(0,i.kt)("b",null,"signer")," (mandatory, object): The object representing the signer for the transaction. ",(0,i.kt)("br",null),(0,i.kt)("b",null,"type")," (mandatory, number): The type of recipient. Possible values are 1 (broadcast), 3 (single recipient), and 4 (group of recipients). ",(0,i.kt)("br",null),(0,i.kt)("b",null,"identityType")," (mandatory, number): The identity type of the recipient. Possible values are 2 (direct payload). ",(0,i.kt)("br",null),(0,i.kt)("b",null,"notification")," (mandatory, object): An object representing the notification. ",(0,i.kt)("br",null),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"title")," (mandatory, string): The title of the notification."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"body")," (mandatory, string): The body of the notification.",(0,i.kt)("b",null,"payload")," (mandatory, object): An object representing the payload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"title")," (mandatory, string): The title of the payload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"body")," (mandatory, string): The body of the payload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"cta")," (optional, string): The call-to-action of the payload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("b",null,"img")," (optional, string): The image of the payload. ",(0,i.kt)("br",null))),(0,i.kt)("b",null,"recipients")," (optional, string or array of strings): The recipient address(es) in CAIP format. Only required for type 3 (single recipient) or type 4 (group of recipients). ",(0,i.kt)("br",null),(0,i.kt)("b",null,"channel")," (mandatory, string): The channel\u2019s address in CAIP format. ",(0,i.kt)("br",null),(0,i.kt)("b",null,"env")," (optional, string): The API environment to use. Possible values are \u2018prod\u2019 and \u2018staging\u2019. Default is \u2018prod\u2019. ",(0,i.kt)("br",null),(0,i.kt)("p",null,"Here are examples of how you might use the ",(0,i.kt)("b",null,"sendNotification")," method in your code:"),(0,i.kt)("b",null,"Single recipient (target):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const apiResponse = await PushAPI.payloads.sendNotification({\n  signer,\n  type: 3, // target\n  identityType: 2, // direct payload\n  notification: {\n    title: `[SDK-TEST] notification TITLE:`,\n    body: `[sdk-test] notification BODY`\n  },\n  payload: {\n    title: `[sdk-test] payload title`,\n    body: `sample msg body`,\n    cta: '',\n    img: ''\n  },\n  recipients: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681', // recipient address\n  channel: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681', // your channel address\n  env: 'staging'\n});\n")),(0,i.kt)("b",null,"Group of recipients (subset):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const apiResponse = await PushAPI.payloads.sendNotification({\n  signer,\n  type: 4, // subset\n  identityType: 2, // direct payload\n  notification: {\n    title: `[SDK-TEST] notification TITLE:`,\n    body: `[sdk-test] notification BODY`\n  },\n  payload: {\n    title: `[sdk-test] payload title`,\n    body: `sample msg body`,\n    cta: '',\n    img: ''\n  },\n  recipients: ['eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681', 'eip155:5:0xCdBE6D076e05c5875D90fa35cc85694E1EAFBBd1'], // recipients addresses\n  channel: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681', // your channel address\n  env: 'staging'\n});\n")),(0,i.kt)("b",null,"All recipients (broadcast):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const apiResponse = await PushAPI.payloads.sendNotification({\n  signer,\n  type: 1, // broadcast\n  identityType: 2, // direct payload\n  notification: {\n    title: `[SDK-TEST] notification TITLE:`,\n    body: `[sdk-test] notification BODY`\n  },\n  payload: {\n    title: `[sdk-test] payload title`,\n    body: `sample msg body`,\n    cta: '',\n    img: ''\n  },\n  channel: 'eip155:5:0xD8634C39BBFd4033c0d3289C4515275102423681', // your channel address\n  env: 'staging'\n});\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("b",null,"sendNotification")," method returns a confirmation (apiResponse) of the notification being sent, with a status code of 204 indicating success."),(0,i.kt)("p",null,"That\u2019s it! You now know how to use the main features of the Push Protocol REST API to add push notification functionality to your application\ud83c\udf89"),(0,i.kt)("p",null,"We\u2019ll cover other parts of the Push SDK in coming posts so stay tuned!"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.push.org/developers/developer-tooling/push-sdk"},"Push Protocol SDK documentation here")," \u2014 if you\u2019d like more reference material to chew on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/ethereum-push-notification-service/push-sdk"},"Push SDK on GitHub")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://discord.gg/pushprotocol"},"Our Discord")," \u2014 we\u2019ve got devs ready to give your project whatever support and consultation you need."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.push.org/developers/"},"Push developer docs")," to get started on building right away!")),(0,i.kt)("p",null,"#PoweredbyPush"),(0,i.kt)("h3",{id:"about-push-protocol"},"About Push Protocol"),(0,i.kt)("p",null,"Push is the communication protocol of web3. Push protocol enables cross-chain notifications and messaging for dapps, wallets, and services tied to wallet addresses in an open, gasless, and platform-agnostic fashion. The open communication layer allows any crypto wallet /frontend to tap into the network and get the communication across."),(0,i.kt)("p",null,"To keep up-to-date with Push Protocol: ",(0,i.kt)("a",{parentName:"p",href:"https://push.org/"},"Website"),", ",(0,i.kt)("a",{parentName:"p",href:"https://twitter.com/pushprotocol"},"Twitter"),", ",(0,i.kt)("a",{parentName:"p",href:"https://t.me/epnsproject"},"Telegram"),", ",(0,i.kt)("a",{parentName:"p",href:"https://discord.gg/pushprotocol"},"Discord"),", ",(0,i.kt)("a",{parentName:"p",href:"https://www.youtube.com/c/EthereumPushNotificationService"},"YouTube"),", and ",(0,i.kt)("a",{parentName:"p",href:"https://linktr.ee/pushprotocol"},"Linktree"),"."))}m.isMDXComponent=!0},87285:function(e,t,n){t.Z=n.p+"assets/images/cover-image-8fef209b02018162b80d8fdc5ee94416.webp"}}]);