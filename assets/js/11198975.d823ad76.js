"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[50950],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(n),p=l,m=c["".concat(s,".").concat(p)]||c[p]||h[p]||r;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2019:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return c}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],o={id:"docs-notifications-psc-core-smart-contract",title:"Push Core Contract",hide_title:!0,slug:"./core-smart-contract",displayed_sidebar:"pushNotificationSidebar",sidebar_position:1,image:"/assets/docs/previews/docs_notifications_psc_core_smart_contract--push_core_contract.png"},s="Push Core Contract",u={unversionedId:"notifications/push-smart-contracts/docs-notifications-psc-core-smart-contract",id:"notifications/push-smart-contracts/docs-notifications-psc-core-smart-contract",title:"Push Core Contract",description:"The Push core protocol, as the name might indicate, is the main smart contract as it handles some of the most crucial features like Channel creation, governance, channel state changes as well as funds and incentive mechanisms, etc.",source:"@site/docs/notifications/05-push-smart-contracts/01-PSC-Push-Core-Contract.mdx",sourceDirName:"notifications/05-push-smart-contracts",slug:"/notifications/push-smart-contracts/core-smart-contract",permalink:"/docs/notifications/push-smart-contracts/core-smart-contract",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/notifications/05-push-smart-contracts/01-PSC-Push-Core-Contract.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"docs-notifications-psc-core-smart-contract",title:"Push Core Contract",hide_title:!0,slug:"./core-smart-contract",displayed_sidebar:"pushNotificationSidebar",sidebar_position:1,image:"/assets/docs/previews/docs_notifications_psc_core_smart_contract--push_core_contract.png"},sidebar:"pushNotificationSidebar",previous:{title:"Push Smart Contracts",permalink:"/docs/notifications/push-smart-contracts"},next:{title:"Push Comm Contract",permalink:"/docs/notifications/push-smart-contracts/comm-smart-contract"}},d={},c=[{value:"Types &amp; Modifiers",id:"types--modifiers",level:2},{value:"Storage Variables",id:"storage-variables",level:3},{value:"Storage variables for FSRatio Calculation",id:"storage-variables-for-fsratio-calculation",level:3},{value:"Structs",id:"structs",level:2},{value:"ChannelType",id:"channeltype",level:3},{value:"channelState",id:"channelstate",level:3},{value:"verifiedBy",id:"verifiedby",level:3},{value:"poolContribution",id:"poolcontribution",level:3},{value:"channelLastUpdate",id:"channellastupdate",level:3},{value:"channelStartBlock",id:"channelstartblock",level:3},{value:"channelUpdateBlock",id:"channelupdateblock",level:3},{value:"channelWeight",id:"channelweight",level:3},{value:"expiryTime",id:"expirytime",level:3},{value:"Modifiers",id:"modifiers",level:2},{value:"onlyPushChannelAdmin()",id:"onlypushchanneladmin",level:3},{value:"onlyGovernance()",id:"onlygovernance",level:3},{value:"onlyInactiveChannels()",id:"onlyinactivechannels",level:3},{value:"onlyActivatedChannels()",id:"onlyactivatedchannels",level:3},{value:"onlyDeactivatedChannels()",id:"onlydeactivatedchannels",level:3},{value:"onlyUnblockedChannels()",id:"onlyunblockedchannels",level:3},{value:"onlyChannelOwner()",id:"onlychannelowner",level:3},{value:"onlyUserAllowedChannelType()",id:"onlyuserallowedchanneltype",level:3},{value:"Mappings",id:"mappings",level:2},{value:"channels",id:"channels",level:3},{value:"channelById",id:"channelbyid",level:3},{value:"channelNotifSettings",id:"channelnotifsettings",level:3},{value:"nonces",id:"nonces",level:3},{value:"channelUpdateCounter",id:"channelupdatecounter",level:3},{value:"usersRewardsClaimed",id:"usersrewardsclaimed",level:3},{value:"Enums",id:"enums",level:2},{value:"ChannelType",id:"channeltype-1",level:3},{value:"ChannelAction",id:"channelaction",level:3},{value:"Interface",id:"interface",level:2},{value:"Methods",id:"methods",level:2},{value:"1. setEpnsCommunicatorAddress",id:"1-setepnscommunicatoraddress",level:3},{value:"2. setGovernanceAddress",id:"2-setgovernanceaddress",level:3},{value:"3. setFeeAmount",id:"3-setfeeamount",level:3},{value:"4. setMinChannelCreationFees",id:"4-setminchannelcreationfees",level:3},{value:"5. transferPushChannelAdminControl",id:"5-transferpushchanneladmincontrol",level:3},{value:"6. createChannelWithPUSH",id:"6-createchannelwithpush",level:3},{value:"7. deactivateChannel",id:"7-deactivatechannel",level:3},{value:"8. reactivateChannel",id:"8-reactivatechannel",level:3},{value:"9. blockChannel",id:"9-blockchannel",level:3},{value:"10. verifyChannel",id:"10-verifychannel",level:3},{value:"11. unverifyChannel",id:"11-unverifychannel",level:3},{value:"12. updateChannelMeta",id:"12-updatechannelmeta",level:3},{value:"13. getChannelState",id:"13-getchannelstate",level:3},{value:"14. getChannelVerification",id:"14-getchannelverification",level:3},{value:"15. destroyTimeBoundChannel",id:"15-destroytimeboundchannel",level:3},{value:"16. addSubGraph",id:"16-addsubgraph",level:3},{value:"Deprecated State Variables",id:"deprecated-state-variables",level:2}],h={toc:c},p="wrapper";function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)(p,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"push-core-contract"},"Push Core Contract"),(0,r.kt)("p",null,"The Push core protocol, as the name might indicate, is the main smart contract as it handles some of the most crucial features like ",(0,r.kt)("strong",{parentName:"p"},"Channel creation, governance, channel state changes as well as funds and incentive mechanisms, etc.")),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"Push Core smart contract is only be deployed on the Ethereum blockchain and not on any other chain.")),(0,r.kt)("head",null,(0,r.kt)("title",null,"Push Core Smart Contracts | Push Notifications | Push Documentation")),(0,r.kt)("h2",{id:"types--modifiers"},"Types & Modifiers"),(0,r.kt)("p",null,"Explains the different types of Data types and access controls used in the Push core smart contract"),(0,r.kt)("h3",{id:"storage-variables"},"Storage Variables"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'  string public constant name = "EPNS_CORE_V1.5";\n  address public pushChannelAdmin;\n  address public governance;\n  address public daiAddress;\n  address public aDaiAddress;\n  address public WETH_ADDRESS;\n  address public epnsCommunicator;\n  address public UNISWAP_V2_ROUTER;\n  address public PUSH_TOKEN_ADDRESS;\n  address public lendingPoolProviderAddress;\n\n  uint256 public REFERRAL_CODE;\n  uint256 ADJUST_FOR_FLOAT;\n  uint256 public channelsCount;\n\n  //  @notice Helper Variables for FSRatio Calculation | GROUPS = CHANNELS\n  uint256 public groupNormalizedWeight;\n  uint256 public groupHistoricalZ;\n  uint256 public groupLastUpdate;\n  uint256 public groupFairShareCount;\n\n  // @notice Necessary variables for Keeping track of Funds and Fees\n  uint256 public CHANNEL_POOL_FUNDS;\n  uint256 public PROTOCOL_POOL_FEES;\n  uint256 public ADD_CHANNEL_MIN_FEES;\n  uint256 public FEE_AMOUNT;\n  uint256 public MIN_POOL_CONTRIBUTION;\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"To keep track of FUNDS and FEES in Push Core")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CHANNEL_POOL_FUNDS")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keeps track of the PUSH tokens that are claimable to the channel owners whenever they deactivate or delete the channel."),(0,r.kt)("li",{parentName:"ul"},"The amount of PUSH token added to this variable is the remaining amount after deducting the ",(0,r.kt)("strong",{parentName:"li"},"PROTOCOL_POOL_FEES")," from the amount that a user sends while creating or reactivating a channel."),(0,r.kt)("li",{parentName:"ul"},"For example, you sent 50 tokens to create a channel, then 10 tokens will be added to ",(0,r.kt)("strong",{parentName:"li"},"PROTOCOL_POOL_FEES"),", and the remaining 40 is added to ",(0,r.kt)("strong",{parentName:"li"},"CHANNEL_POOL_FUNDS"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PROTOCOL_POOL_FEES")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A small fee amount is deducted by the core smart contract for any imperative transaction like channel creation, channel reactivation, channel detail modification, and others."),(0,r.kt)("li",{parentName:"ul"},"As of now, the protocol fee is set to be equal to 10 PUSH tokens. This value, however, can be changed by the community later using on-chain governance."),(0,r.kt)("li",{parentName:"ul"},"Simply deducted from the same amount that a channel creator chooses to stake in the protocol. For example, if you chose to stake 50 PUSH during channel creation, 10 of those 50 PUSH tokens go into Protocol Fee Pool, while the remaining goes into Channel Pool Funds that are claimable by channel owners anytime they choose to deactivate their channel.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"ADD_CHANNEL_MIN_FEES")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The minimum amount of PUSH that is required for creating or reactivating a channel."),(0,r.kt)("li",{parentName:"ul"},"The current value of this state variable is ",(0,r.kt)("strong",{parentName:"li"},"50 PUSH.")),(0,r.kt)("li",{parentName:"ul"},"Can be updated only via on-chain governance using the ",(0,r.kt)("strong",{parentName:"li"},"setMinChannelCreationFees()")," function."),(0,r.kt)("li",{parentName:"ul"},"Can never be below ",(0,r.kt)("strong",{parentName:"li"},"50 PUSH."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"FEE_AMOUNT")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Represents the deactivation fee charged to a channel owner when the channel is Deactivated."),(0,r.kt)("li",{parentName:"ul"},"The current value of this state variable is ",(0,r.kt)("strong",{parentName:"li"},"10 PUSH.")),(0,r.kt)("li",{parentName:"ul"},"Can be updated only via on-chain governance using the ",(0,r.kt)("em",{parentName:"li"},"setFeeAmount()")," function.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"MIN_POOL_CONTRIBUTION")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Represents the constant value of 1 PUSH used for the calculation of a channel's weight in the protocol."),(0,r.kt)("li",{parentName:"ul"},"This amount is deducted from the channel pool contribution at the time of deactivating a channel and the remaining amount is refunded to the user.")),(0,r.kt)("h3",{id:"storage-variables-for-fsratio-calculation"},"Storage variables for FSRatio Calculation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The concept of adjusting the fair share of channels is no longer being used by the protocol, That\u2019s why these variables have no significance from version 1.5 onwards."),(0,r.kt)("li",{parentName:"ul"},"These variables are only present in the contract to avoid storage collisions, as our contracts are upgradeable."),(0,r.kt)("li",{parentName:"ul"},"Below are the uses of these variables in version 1. No longer needed in Version 1.5")),(0,r.kt)("h2",{id:"structs"},"Structs"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"struct Channel {\n  ChannelType channelType;\n  uint8 channelState;\n\n  address verifiedBy;\n\n  uint256 poolContribution;  \n  uint256 channelHistoricalZ;\n  uint256 channelFairShareCount;\n\n  uint256 channelLastUpdate;\n  uint256 channelStartBlock;\n  uint256 channelUpdateBlock;\n\n  uint256 channelWeight;\n  uint256 expiryTime;\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Channel")," struct in the Push Core smart contract stores every crucial data about the channels that are created on the core contract."),(0,r.kt)("h3",{id:"channeltype"},"ChannelType"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Denotes the type of channel being created."),(0,r.kt)("li",{parentName:"ul"},"A Channel can be any of the 6 available types \u2014",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"ProtocolNonInterest"),(0,r.kt)("li",{parentName:"ol"},"ProtocolPromotion"),(0,r.kt)("li",{parentName:"ol"},"InterestBearingOpen"),(0,r.kt)("li",{parentName:"ol"},"InterestBearingMutual"),(0,r.kt)("li",{parentName:"ol"},"Timebound"),(0,r.kt)("li",{parentName:"ol"},"TokenGaited")))),(0,r.kt)("h3",{id:"channelstate"},"channelState"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Symbolizes the current state of a particular channel."),(0,r.kt)("li",{parentName:"ul"},"A channel can have any of the following states \u2014",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"INACTIVE - 0"),(0,r.kt)("li",{parentName:"ol"},"ACTIVE - 1"),(0,r.kt)("li",{parentName:"ol"},"DEACTIVATED - 2"),(0,r.kt)("li",{parentName:"ol"},"BLOCKED - 3")))),(0,r.kt)("h3",{id:"verifiedby"},"verifiedBy"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Denotes the address of the verifier of the Channel")),(0,r.kt)("h3",{id:"poolcontribution"},"poolContribution"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Denotes the total amount of PUSH deposited by the channel owner during Channel Creation."),(0,r.kt)("li",{parentName:"ul"},"Pool contribution is calculated by deducting the ",(0,r.kt)("strong",{parentName:"li"},"FEE_AMOUNT")," from the amount user sends at the time of channel creation or reactivation.")),(0,r.kt)("h3",{id:"channellastupdate"},"channelLastUpdate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The last update block number. It was used to calculate the fair share ratio, but now it just stores the last update block number")),(0,r.kt)("h3",{id:"channelstartblock"},"channelStartBlock"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Represents the block number when a specific channel was created")),(0,r.kt)("h3",{id:"channelupdateblock"},"channelUpdateBlock"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Represents the block number that depicts when a channel was updated")),(0,r.kt)("h3",{id:"channelweight"},"channelWeight"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Represents the individual weight to be applied as per pool contribution.")),(0,r.kt)("h3",{id:"expirytime"},"expiryTime"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The timestamp at which the channel gets expired and can be deleted by the owner")),(0,r.kt)("h2",{id:"modifiers"},"Modifiers"),(0,r.kt)("h3",{id:"onlypushchanneladmin"},"onlyPushChannelAdmin()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only allows Push Channel Admin to access the function")),(0,r.kt)("h3",{id:"onlygovernance"},"onlyGovernance()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only allows Governance contract to access the function")),(0,r.kt)("h3",{id:"onlyinactivechannels"},"onlyInactiveChannels()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only for channels that are currently in an INACTIVE state"),(0,r.kt)("li",{parentName:"ul"},"Used in the following function:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"createChannelWithFees()"))),(0,r.kt)("h3",{id:"onlyactivatedchannels"},"onlyActivatedChannels()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only for channels that are currently in an ACTIVE state"),(0,r.kt)("li",{parentName:"ul"},"Used in the following functions:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"createChannelSettings()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"deactivateChannel()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"verifyChannel()"))),(0,r.kt)("h3",{id:"onlydeactivatedchannels"},"onlyDeactivatedChannels()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only for channels that are neither in BLOCKED state nor INACTIVE"),(0,r.kt)("li",{parentName:"ul"},"Used in the following function:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"reactivateChannel()"))),(0,r.kt)("h3",{id:"onlyunblockedchannels"},"onlyUnblockedChannels()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only for channels that are currently in a BLOCKED state"),(0,r.kt)("li",{parentName:"ul"},"Used in the following function:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"blockChannel()"))),(0,r.kt)("h3",{id:"onlychannelowner"},"onlyChannelOwner()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only for the owner of a particular channel"),(0,r.kt)("li",{parentName:"ul"},"Used in the following function:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"updateChannelMeta()"))),(0,r.kt)("h3",{id:"onlyuserallowedchanneltype"},"onlyUserAllowedChannelType()"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ensures that the channel type passed as an argument while creating a channel is a valid channel type"),(0,r.kt)("li",{parentName:"ul"},"Used in the following function:"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"createChannelWithFees()"))),(0,r.kt)("h2",{id:"mappings"},"Mappings"),(0,r.kt)("h3",{id:"channels"},"channels"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapping(address => Channel) public channels;")),(0,r.kt)("li",{parentName:"ul"},"Maps a channel's address to its Struct")),(0,r.kt)("h3",{id:"channelbyid"},"channelById"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapping(uint256 => address) public channelById;")),(0,r.kt)("li",{parentName:"ul"},"Maps the uint256 ID of a particular channel to its address."),(0,r.kt)("li",{parentName:"ul"},"Updated in the ",(0,r.kt)("strong",{parentName:"li"},"_createChannel()")," function.")),(0,r.kt)("h3",{id:"channelnotifsettings"},"channelNotifSettings"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapping(address => string) public channelNotifSettings;")),(0,r.kt)("li",{parentName:"ul"},"Keeps track of the notification settings selected by a channel"),(0,r.kt)("li",{parentName:"ul"},"Updated in the ",(0,r.kt)("strong",{parentName:"li"},"createChannelSettings()")," function.")),(0,r.kt)("h3",{id:"nonces"},"nonces"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapping(address => uint256) public nonces;")),(0,r.kt)("li",{parentName:"ul"},"Used to keep track of how many times a user signed a message."),(0,r.kt)("li",{parentName:"ul"},"Used in off-chain signature verification."),(0,r.kt)("li",{parentName:"ul"},"increments every time a user signs a message")),(0,r.kt)("h3",{id:"channelupdatecounter"},"channelUpdateCounter"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapping(address => uint256) public channelUpdateCounter;")),(0,r.kt)("li",{parentName:"ul"},"Tracks the update count of a channel, i.e. how many times a channel is being updated."),(0,r.kt)("li",{parentName:"ul"},"Used to determine the price of updating a channel. More the update count more the price.")),(0,r.kt)("h3",{id:"usersrewardsclaimed"},"usersRewardsClaimed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"mapping(address => uint256) public usersRewardsClaimed;")),(0,r.kt)("li",{parentName:"ul"},"tracks the rewards a user has claimed."),(0,r.kt)("li",{parentName:"ul"},"not implemented in V1.5 but will be implemented in V2")),(0,r.kt)("h2",{id:"enums"},"Enums"),(0,r.kt)("p",null,"The EPNS Core smart contract includes 2 main ENUMS."),(0,r.kt)("h3",{id:"channeltype-1"},"ChannelType"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"enum ChannelType {    \n  ProtocolNonInterest,    \n  ProtocolPromotion,    \n  InterestBearingOpen,  \n  InterestBearingMutual,\n  Timebound,\n  TokenGaited\n} \n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This represents the type of channel being created. It can be any one of the 6 types \u2014",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"ProtocolNonInterest,"),(0,r.kt)("li",{parentName:"ol"},"ProtocolPromotion,"),(0,r.kt)("li",{parentName:"ol"},"InterestBearingOpen,"),(0,r.kt)("li",{parentName:"ol"},"InterestBearingMutual,"),(0,r.kt)("li",{parentName:"ol"},"Timebound,"),(0,r.kt)("li",{parentName:"ol"},"TokenGaited")))),(0,r.kt)("h3",{id:"channelaction"},"ChannelAction"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"enum ChannelAction {  \n   ChannelRemoved,   \n   ChannelAdded,   \n   ChannelUpdated \n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This enum has no use in V1.5 as this was mainly used while calculating the fair share of channels. This is only present in V1.5 to avoid storage collisions."),(0,r.kt)("li",{parentName:"ul"},"It was used to represent the different channel actions that occur in the protocol."),(0,r.kt)("li",{parentName:"ul"},"There could be 3 main channel actions:"),(0,r.kt)("li",{parentName:"ul"},"ChannelAdded: When a channel is created and added to the protocol"),(0,r.kt)("li",{parentName:"ul"},"ChannelRemoved: When a channel is blocked and removed from the protocol"),(0,r.kt)("li",{parentName:"ul"},"ChannelUpdated: When a channel is either deactivated or reactivated")),(0,r.kt)("h2",{id:"interface"},"Interface"),(0,r.kt)("p",null,"Push contract interacts with PUSH token and communicator contract with the help of these interfaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"interface IPUSH {\n  function born() external view returns(uint);\n  function totalSupply() external view returns(uint);\n  function resetHolderWeight(address holder) external;\n  function returnHolderUnits(address account, uint atBlock) external view returns (uint);\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"interface IEPNSCommV1 {\n  function subscribeViaCore(address _channel, address _user) external returns(bool);\n  function unSubscribeViaCore(address _channel, address _user) external returns (bool);\n}\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"Brief overview of all the imperative functionalities of the Push Core smart contract version 1.5."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"Only Admin Setter Functions"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"1-setepnscommunicatoraddress"},"1. setEpnsCommunicatorAddress"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setEpnsCommunicatorAddress(address _commAddress) external onlyPushChannelAdmin() {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Allows only the Push Channel Admin to set the Push Communicator smart contract's address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_commAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the communicator protocol")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"2-setgovernanceaddress"},"2. setGovernanceAddress"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setGovernanceAddress(address _governanceAddress) external onlyPushChannelAdmin() {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Allows only the Push Channel Admin to set the Governance address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_governanceAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the Governance protocol")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"3-setfeeamount"},"3. setFeeAmount"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setFeeAmount(uint256 _newFees) external onlyGovernance() {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Sets the FEE_AMOUNT to a new fee amount."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_newFees"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"New Fee Amount in the protocol")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"4-setminchannelcreationfees"},"4. setMinChannelCreationFees"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function setMinChannelCreationFees(uint256 _newFees) external onlyGovernance() {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Sets the Channel Creation fees to a new fee amount."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_newFees"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"New Channel Creation fees in the protocol")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"5-transferpushchanneladmincontrol"},"5. transferPushChannelAdminControl"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function transferPushChannelAdminControl(address _newAdmin) external onlyPushChannelAdmin() {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Changes the Push Channel admin's address to a new Address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_newAdmin"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the new Admin")))),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"Core Functionalities"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"6-createchannelwithpush"},"6. createChannelWithPUSH"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function createChannelWithPUSH(\n    ChannelType _channelType,\n    bytes calldata _identity,\n    uint256 _amount,\n    uint256 _channelExpiryTime\n) external whenNotPaused onlyInactiveChannels(msg.sender) onlyUserAllowedChannelType(_channelType) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Channel state changes from Inactive to Active. All imperative channel information (e.g., creation block number, total PUSH deposited, channel type) are stored. "),(0,r.kt)("p",null,"Channel expiry time is stored if it's timebound; otherwise, it remains 0. The total Channel count increases by 1. The method emits an AddChannel() event with the Channel's address, Channel's Type, and Identity."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channelType"),(0,r.kt)("td",{parentName:"tr",align:null},"Enum"),(0,r.kt)("td",{parentName:"tr",align:null},"Represents the type of Channel being created")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_identity"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"Identity bytes of the Channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Total amount of PUSH being deposited")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channelExpiryTime"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Time when the channel will expire and be ready for deletion")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"7-deactivatechannel"},"7. deactivateChannel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function deactivateChannel() external whenNotPaused onlyActivatedChannels(msg.sender) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:")),(0,r.kt)("p",null,"Channel's state is changed from ACTIVE to DEACTIVATED. A minimum Pool Contribution of 1 PUSH token is deducted from the pool contribution of the channel. The remaining amount of PUSH after fee deduction is refunded back to the Channel Owner. The refunded amount is also subtracted from the Pool funds of the protocol. "),(0,r.kt)("p",null,"Imperative on-chain details about the channel like channel state, new Channel pool contribution, new Channel weight, etc., are updated in the contract. Emits a DeactivateChannel() event with the Channel's address and Total Refund amount value."),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"8-reactivatechannel"},"8. reactivateChannel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function reactivateChannel(uint256 _amount) external whenNotPaused onlyDeactivatedChannels(msg.sender) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Channel's state is changed from DEACTIVATED to ACTIVE. The Fee amount is deducted from the received amount and added to Protocol Pool Fees. The remaining amount of PUSH after fee deduction is added to Protocol Pool fund. "),(0,r.kt)("p",null,"Channel's new pool contribution and weight are updated. Imperative on-chain details about the channel like channel state, new Channel pool contribution, new Channel weight, etc., are updated in the contract. Emits a ReactivateChannel() event with the Channel's address and Total Deposited amount value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"PUSH amount to be deposited for the reactivation of the channel")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"9-blockchannel"},"9. blockChannel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function blockChannel(address _channelAddress) external whenNotPaused onlyPushChannelAdmin onlyUnblockedChannels(_channelAddress) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Channel's state is changed to BLOCKED state. Once blocked, the channel address cannot be reactivated. The pool contribution of the respective channel is deducted from Pool funds and added to pool fees. "),(0,r.kt)("p",null,"Channel's pool contribution & weight are updated to new values, and no refund shall be given to the Channel owner when blocked. Emits a ChannelBlocked() event with the Channel's address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channelAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the target channel to be blocked")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"10-verifychannel"},"10. verifyChannel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function verifyChannel(address _channel) public onlyActivatedChannels(_channel) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","The target channel is marked as a verified channel. The Verifier's address of the target channel is stored in the channel's struct. This determines the type of verification tag the target channel has. For instance:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the Channel was verified directly by Push Channel Admin, it will have a ",(0,r.kt)("strong",{parentName:"li"},"Primary Verification Tag.")),(0,r.kt)("li",{parentName:"ul"},"If the Channel was verified by any other verified channel, it will have a Secondary Verification Tag. ")),(0,r.kt)("p",null,"Emits a ChannelVerified() event with the Channel's address and the Verifier's Address."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channel"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the channel to be verified")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"11-unverifychannel"},"11. unverifyChannel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function unverifyChannel(address _channel) public {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Marks the target channel as Unverified. Emits a ChannelVerificationRevoked() event with the Channel's address and the address that revoked the verification tag of the channel."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channel"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"The address of the channel whose verification shall be revoked")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"12-updatechannelmeta"},"12. updateChannelMeta"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function updateChannelMeta(\n    address _channel,\n    bytes calldata _newIdentity,\n    uint256 _amount\n) external whenNotPaused onlyChannelOwner(_channel) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Allows the Channel Owner to update their Channel Description or any imperative detail. The amount needed is the product of channel creation fees and the number of times this particular channel has been updated. "),(0,r.kt)("p",null,"This approach makes it difficult to abuse the update channel feature. Adds the amount received to the Protocol Fees. Emits an UpdateChannel() event with the Channel's address and the New Identity bytes of the Channel."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channel"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the channel")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_newIdentity"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"New Identity bytes of the Channel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_amount"),(0,r.kt)("td",{parentName:"tr",align:null},"uint256"),(0,r.kt)("td",{parentName:"tr",align:null},"Amount needed to upgrade the channel")))),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("inlineCode",{parentName:"em"},"Getter Functions"))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"13-getchannelstate"},"13. getChannelState"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getChannelState(address _channel) external view returns (uint256 state) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Returns the current state of the Channel. The returned value can be interpreted as:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"0 -> INACTIVE"),(0,r.kt)("li",{parentName:"ul"},"1 -> ACTIVATED"),(0,r.kt)("li",{parentName:"ul"},"2 -> DeActivated By Channel Owner"),(0,r.kt)("li",{parentName:"ul"},"3 -> BLOCKED by pushChannelAdmin/Governance")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channel"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the channel whose state is required")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"14-getchannelverification"},"14. getChannelVerification"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function getChannelVerification(address _channel) public view returns (uint8 verificationStatus) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","Returns the verification tag of the channel's address passed in the argument. If the channel is not currently verified by anyone, the function returns 0. If verified by the Push Channel admin, it returns 1 (Primary verification tag). If verified by another verified channel, it returns 2 (Secondary verification tag)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channel"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the channel whose verification tag is needed")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"15-destroytimeboundchannel"},"15. destroyTimeBoundChannel"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function destroyTimeBoundChannel(address _channelAddress) external whenNotPaused onlyActivatedChannels(_channelAddress) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","If the channel's expiry date has been reached, the owner can proceed to delete it. The owner gets a refund of the channel\u2019s amount in pool funds. However, the refund is only available for 14 days from the day the channel expires. "),(0,r.kt)("p",null,"If the owner doesn\u2019t delete the channel within this timeframe, the admin gains the power to delete the channel. When deleted by the admin, the refundable amount is not returned but is deducted from the pool fund and added to pool fees."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_channelAddress"),(0,r.kt)("td",{parentName:"tr",align:null},"address"),(0,r.kt)("td",{parentName:"tr",align:null},"Address of the channel to be destroyed")))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"16-addsubgraph"},"16. addSubGraph"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function addSubGraph(bytes calldata _subGraphData) external onlyActivatedChannels(msg.sender) {};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Description:"),(0,r.kt)("br",{parentName:"p"}),"\n","This function allows users to pass subGraph data, in the form of bytes, which combines the Subgraph ID and Poll Interval. An event is emitted with the msg.sender and the bytes value."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Argument"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"_subGraphData"),(0,r.kt)("td",{parentName:"tr",align:null},"bytes"),(0,r.kt)("td",{parentName:"tr",align:null},"A combination of the Subgraph ID and Poll Interval")))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"deprecated-state-variables"},"Deprecated State Variables"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"groupNormalizedWeight"),(0,r.kt)("li",{parentName:"ul"},"groupHistoricalZ"),(0,r.kt)("li",{parentName:"ul"},"groupLastUpdate"),(0,r.kt)("li",{parentName:"ul"},"groupFairShareCount"),(0,r.kt)("li",{parentName:"ul"},"channelHistoricalZ"),(0,r.kt)("li",{parentName:"ul"},"channelFairShareCount")))}m.isMDXComponent=!0}}]);