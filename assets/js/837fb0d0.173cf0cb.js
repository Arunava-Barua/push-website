"use strict";(self.webpackChunkpush_website=self.webpackChunkpush_website||[]).push([[651],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),f=i,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||o;return n?a.createElement(m,r(r({ref:t},p),{},{components:n})):a.createElement(m,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:i,r[1]=s;for(var l=2;l<o;l++)r[l]=n[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},73706:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var a=n(87462),i=n(63366),o=(n(67294),n(3905)),r=(n(23734),["components"]),s={id:"docs-notifications-important-concepts",title:"Important Concepts",hide_title:!0,slug:"./important-concepts",displayed_sidebar:"pushNotificationSidebar",sidebar_position:3,image:"/assets/docs/previews/docs_notifications--important_concepts.png"},c="Important Concepts",l={unversionedId:"notifications/docs-notifications-important-concepts",id:"notifications/docs-notifications-important-concepts",title:"Important Concepts",description:"Before you begin sending your web3 native notifications from your protocol to wallets. It's important to learn few core concepts to help understand it better.",source:"@site/docs/notifications/03-Important-Concepts.mdx",sourceDirName:"notifications",slug:"/notifications/important-concepts",permalink:"/docs/notifications/important-concepts",draft:!1,editUrl:"https://github.com/ethereum-push-notification-service/push-website/blob/main/docs/notifications/03-Important-Concepts.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"docs-notifications-important-concepts",title:"Important Concepts",hide_title:!0,slug:"./important-concepts",displayed_sidebar:"pushNotificationSidebar",sidebar_position:3,image:"/assets/docs/previews/docs_notifications--important_concepts.png"},sidebar:"pushNotificationSidebar",previous:{title:"Quickstart",permalink:"/docs/notifications/quickstart"},next:{title:"Build",permalink:"/docs/notifications/build"}},p={},d=[{value:"What is a Channel?",id:"what-is-a-channel",level:2},{value:"Who can send notifications?",id:"who-can-send-notifications",level:2},{value:"How to receive notifications?",id:"how-to-receive-notifications",level:2},{value:"Types of supported wallet address (Account)",id:"types-of-supported-wallet-address-account",level:2},{value:"Standard Wallet Address",id:"standard-wallet-address",level:3},{value:"Chain Specific Wallet Address",id:"chain-specific-wallet-address",level:3},{value:"Lens profile / Cyberconnect profile / Any NFT profile",id:"lens-profile--cyberconnect-profile--any-nft-profile",level:3}],u={toc:d},f="wrapper";function m(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)(f,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"important-concepts"},"Important Concepts"),(0,o.kt)("p",null,"Before you begin sending your web3 native notifications from your protocol to wallets. It's important to learn few core concepts to help understand it better."),(0,o.kt)("head",null,(0,o.kt)("title",null,"Important Concepts | Push Notifications | Push Documentation")),(0,o.kt)("h2",{id:"what-is-a-channel"},"What is a Channel?"),(0,o.kt)("p",null,"Any protocol that activates itself on Push protocol is known as a channel and gains the capability of sending notifications. "),(0,o.kt)("p",null,"The creation of a channel is a one-time process. Channel creation happens on the Ethereum blockchain and any other chains you want the channel to be. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")," One wallet address can only create one channel only the protocol."),(0,o.kt)("h2",{id:"who-can-send-notifications"},"Who can send notifications?"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"1. Channel Owners"),": The owners of a particular channel can send notifications to their subscribers."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"2. Channel Delegates"),": Channel owners can allow any particular wallet address to send notifications on behalf of their channel. "),(0,o.kt)("h2",{id:"how-to-receive-notifications"},"How to receive notifications?"),(0,o.kt)("p",null,"Push ties notifications (and all other forms of communication) to your wallet in an open yet secure way. This means that notifications can be received by any crypto wallets or crypto frontend that has integrated Push Protocol. ",(0,o.kt)("a",{parentName:"p",href:"/docs/notifications/build/get-started/#receiving-notifications"},"Here are some of our favorites!")),(0,o.kt)("h2",{id:"types-of-supported-wallet-address-account"},"Types of supported wallet address (Account)"),(0,o.kt)("p",null,"Push Notification is chain agnostic and even supports messaging wallet addresses, NFT addresses, all evms (and even non-EVM in the future). Below is the list of evergrowing standards that Push is compatible with, either of which you can use as per your requirements  \u2014"),(0,o.kt)("h3",{id:"standard-wallet-address"},"Standard Wallet Address"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Standard Wallet Address")," - Standard wallet is supported and used by default"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"em"},"usage"))," - ",(0,o.kt)("inlineCode",{parentName:"li"},"0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Sending to standard wallet address - defaults to EVM format\n  await userAlice.channel.send(['0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666'], { \n    notification: {\n      title: 'Hello World',\n      body: 'Web3 native notification!',\n    }\n  });\n")),(0,o.kt)("h3",{id:"chain-specific-wallet-address"},"Chain Specific Wallet Address"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Chain Agnostic Wallet Address")," - Pass ",(0,o.kt)("strong",{parentName:"li"},"{chain_standard}:{chainId}:{account_id}")," format to use this instead of standard wallet address. SDK converts all normal wallet address to chain agnostic ones by default."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"em"},"usage"))," - ",(0,o.kt)("inlineCode",{parentName:"li"},"eip155:1:0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"em"},"usage"))," - ",(0,o.kt)("inlineCode",{parentName:"li"},"eip155:5:0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"em"},"usage"))," - ",(0,o.kt)("inlineCode",{parentName:"li"},"eip155:137:0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Sending to chain agnostic wallet address, support eip155 currently\n  await userAlice.channel.send(['eip155:1:0x99A08ac6254dcf7ccc37CeC662aeba8eFA666666'], { \n    notification: {\n      title: 'Hello World',\n      body: 'Web3 native notification!',\n    }\n  });\n")),(0,o.kt)("h3",{id:"lens-profile--cyberconnect-profile--any-nft-profile"},"Lens profile / Cyberconnect profile / Any NFT profile"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"NFT profile")," - Pass ",(0,o.kt)("strong",{parentName:"li"},"nft:{chain_standard}:{nftChainId}:{nftContractAddress}:{nftTokenId}")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"em"},"usage"))," - ",(0,o.kt)("inlineCode",{parentName:"li"},"nft:eip155:5:0x42af3147f17239341477113484752D5D3dda997B:2:1683058528"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"  // Sending to nft format, any nfts supported including .lens, .crypto, .polygon or your crypto punks\n  await userAlice.chat.send('nft:eip155:5:0x42af3147f17239341477113484752D5D3dda997B:2:1683058528', { \n    notification: {\n      title: 'Hello World',\n      body: 'Web3 native notification!',\n    }\n  });\n")))}m.isMDXComponent=!0}}]);